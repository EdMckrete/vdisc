// Code generated by mockery v1.0.0. DO NOT EDIT.

package mockdriver

import context "context"

import io "io"
import mock "github.com/stretchr/testify/mock"

// Lockable is an autogenerated mock type for the Lockable type
type Lockable struct {
	mock.Mock
}

// Lock provides a mock function with given fields: ctx, url
func (_m *Lockable) Lock(ctx context.Context, url string) (io.Closer, error) {
	ret := _m.Called(ctx, url)

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func(context.Context, string) io.Closer); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RLock provides a mock function with given fields: ctx, url
func (_m *Lockable) RLock(ctx context.Context, url string) (io.Closer, error) {
	ret := _m.Called(ctx, url)

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func(context.Context, string) io.Closer); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
