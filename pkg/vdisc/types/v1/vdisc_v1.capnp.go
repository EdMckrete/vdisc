// Code generated by capnpc-go. DO NOT EDIT.

package vdisc_types_v1

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type VDisc struct{ capnp.Struct }

// VDisc_TypeID is the unique identifier for the type VDisc.
const VDisc_TypeID = 0xedec5a16c6a1a062

func NewVDisc(s *capnp.Segment) (VDisc, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return VDisc{st}, err
}

func NewRootVDisc(s *capnp.Segment) (VDisc, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return VDisc{st}, err
}

func ReadRootVDisc(msg *capnp.Message) (VDisc, error) {
	root, err := msg.RootPtr()
	return VDisc{root.Struct()}, err
}

func (s VDisc) String() string {
	str, _ := text.Marshal(0xedec5a16c6a1a062, s.Struct)
	return str
}

func (s VDisc) BlockSize() uint16 {
	return s.Struct.Uint16(0)
}

func (s VDisc) SetBlockSize(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s VDisc) FsType() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s VDisc) HasFsType() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s VDisc) FsTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s VDisc) SetFsType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s VDisc) Uris() (ITrie_List, error) {
	p, err := s.Struct.Ptr(1)
	return ITrie_List{List: p.List()}, err
}

func (s VDisc) HasUris() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s VDisc) SetUris(v ITrie_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewUris sets the uris field to a newly
// allocated ITrie_List, preferring placement in s's segment.
func (s VDisc) NewUris(n int32) (ITrie_List, error) {
	l, err := NewITrie_List(s.Struct.Segment(), n)
	if err != nil {
		return ITrie_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s VDisc) Extents() (Extent_List, error) {
	p, err := s.Struct.Ptr(2)
	return Extent_List{List: p.List()}, err
}

func (s VDisc) HasExtents() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s VDisc) SetExtents(v Extent_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewExtents sets the extents field to a newly
// allocated Extent_List, preferring placement in s's segment.
func (s VDisc) NewExtents(n int32) (Extent_List, error) {
	l, err := NewExtent_List(s.Struct.Segment(), n)
	if err != nil {
		return Extent_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// VDisc_List is a list of VDisc.
type VDisc_List struct{ capnp.List }

// NewVDisc creates a new list of VDisc.
func NewVDisc_List(s *capnp.Segment, sz int32) (VDisc_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return VDisc_List{l}, err
}

func (s VDisc_List) At(i int) VDisc { return VDisc{s.List.Struct(i)} }

func (s VDisc_List) Set(i int, v VDisc) error { return s.List.SetStruct(i, v.Struct) }

func (s VDisc_List) String() string {
	str, _ := text.MarshalList(0xedec5a16c6a1a062, s.List)
	return str
}

// VDisc_Promise is a wrapper for a VDisc promised by a client call.
type VDisc_Promise struct{ *capnp.Pipeline }

func (p VDisc_Promise) Struct() (VDisc, error) {
	s, err := p.Pipeline.Struct()
	return VDisc{s}, err
}

type ITrie struct{ capnp.Struct }

// ITrie_TypeID is the unique identifier for the type ITrie.
const ITrie_TypeID = 0xb59ee0bfc7a99f7e

func NewITrie(s *capnp.Segment) (ITrie, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ITrie{st}, err
}

func NewRootITrie(s *capnp.Segment) (ITrie, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ITrie{st}, err
}

func ReadRootITrie(msg *capnp.Message) (ITrie, error) {
	root, err := msg.RootPtr()
	return ITrie{root.Struct()}, err
}

func (s ITrie) String() string {
	str, _ := text.Marshal(0xb59ee0bfc7a99f7e, s.Struct)
	return str
}

func (s ITrie) Parent() uint32 {
	return s.Struct.Uint32(0)
}

func (s ITrie) SetParent(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ITrie) Content() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ITrie) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ITrie) ContentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ITrie) SetContent(v string) error {
	return s.Struct.SetText(0, v)
}

// ITrie_List is a list of ITrie.
type ITrie_List struct{ capnp.List }

// NewITrie creates a new list of ITrie.
func NewITrie_List(s *capnp.Segment, sz int32) (ITrie_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ITrie_List{l}, err
}

func (s ITrie_List) At(i int) ITrie { return ITrie{s.List.Struct(i)} }

func (s ITrie_List) Set(i int, v ITrie) error { return s.List.SetStruct(i, v.Struct) }

func (s ITrie_List) String() string {
	str, _ := text.MarshalList(0xb59ee0bfc7a99f7e, s.List)
	return str
}

// ITrie_Promise is a wrapper for a ITrie promised by a client call.
type ITrie_Promise struct{ *capnp.Pipeline }

func (p ITrie_Promise) Struct() (ITrie, error) {
	s, err := p.Pipeline.Struct()
	return ITrie{s}, err
}

type Extent struct{ capnp.Struct }

// Extent_TypeID is the unique identifier for the type Extent.
const Extent_TypeID = 0xa4d7434c98251eb9

func NewExtent(s *capnp.Segment) (Extent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Extent{st}, err
}

func NewRootExtent(s *capnp.Segment) (Extent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Extent{st}, err
}

func ReadRootExtent(msg *capnp.Message) (Extent, error) {
	root, err := msg.RootPtr()
	return Extent{root.Struct()}, err
}

func (s Extent) String() string {
	str, _ := text.Marshal(0xa4d7434c98251eb9, s.Struct)
	return str
}

func (s Extent) UriPrefix() uint32 {
	return s.Struct.Uint32(0)
}

func (s Extent) SetUriPrefix(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Extent) UriSuffix() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Extent) HasUriSuffix() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Extent) UriSuffixBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Extent) SetUriSuffix(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Extent) Blocks() uint32 {
	return s.Struct.Uint32(4)
}

func (s Extent) SetBlocks(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Extent) Padding() uint16 {
	return s.Struct.Uint16(8)
}

func (s Extent) SetPadding(v uint16) {
	s.Struct.SetUint16(8, v)
}

// Extent_List is a list of Extent.
type Extent_List struct{ capnp.List }

// NewExtent creates a new list of Extent.
func NewExtent_List(s *capnp.Segment, sz int32) (Extent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Extent_List{l}, err
}

func (s Extent_List) At(i int) Extent { return Extent{s.List.Struct(i)} }

func (s Extent_List) Set(i int, v Extent) error { return s.List.SetStruct(i, v.Struct) }

func (s Extent_List) String() string {
	str, _ := text.MarshalList(0xa4d7434c98251eb9, s.List)
	return str
}

// Extent_Promise is a wrapper for a Extent promised by a client call.
type Extent_Promise struct{ *capnp.Pipeline }

func (p Extent_Promise) Struct() (Extent, error) {
	s, err := p.Pipeline.Struct()
	return Extent{s}, err
}

const schema_ad3f2ae443d613d9 = "x\xda\x8c\x92\xcfk\x13A\x1c\xc5\xdf\xfbNb\"\x14" +
	"\xed\x92(\x08\xeaA\x14\xb4\x10\xd3\xa0\xa7^\"\xad\x1e" +
	"\x14\x0f\x19[<x\xd1t\xb3\xa9C\xe3f\xba\xbb\x89" +
	"\xa9TK\xc1?\xa2'\x7f\x80\x17\x0f\x1e=x\xf2\xa6" +
	"\xff\x81\xe2\xcd\x83\xd0\x8b\xfe\x0d+\xb3\xe9\xa6%\xa7\xdc" +
	"v\x1f\x1f\x98\xf7>3\x8be\xde\x92F\xb1/\x80>" +
	"_<\x91~\xb9xe\xff\xfe\xca\xcf\x0f\xd0\x97(\xe9" +
	"\xaf\xca\x8f\x95?\x0b\xcdO(\xb2\x04\xdc\xb8\xc0{\xac" +
	"4\xdcg\xa5\xc6\x030}\xf5\xf6\xe3\xf7\xaf\xbf\xdf|" +
	"v4\xa7\xe9\x93\xb2\xcc\xca9q\xf4\x19y\x0e\xa6\xeb" +
	"\xef\xde\x7f;\xfb\xe8\xef\xbfiZ9z\xcb\xd1{\x19" +
	"\xfdR\x0ePK\xed\xe6F}\xd81q\xc1\xaf'\xdb" +
	"6\x88\xeb\xc3F\xf6\xef?\x1e6\xae\xfbm\x1b\xda\xa5" +
	";\xa3$\x08\x13\xa0E\xeayU\x00\x0a\x04\xbc\xf6\x03" +
	"@?Q\xd4=!Y\xa5\xcb\x8c\xcb\x9e*\xeaD\xe8" +
	"\x09\xab\x14\xc0\xdbZ\x02tOQ\x8f\x84\x9e*T\xa9" +
	"\x00o\xb0\x0ch\xab\xa8w\x84\xe9 2\xad(\xe8\x1a" +
	"p\xc42\x84ed\xd9\xea\xa0;\xce\xe6 \x9c\x03\x9b" +
	"\xeb\xbd\xbe\xbf\x19\xe7\xc8\xaemw:&\xdc`\x09\xc2" +
	"\x128\xcb\x94\xbbk\x91\x09\xb2!\xe5\xc9\x90k\xae\xdf" +
	"eE\xbdx4\xa4\xe6\xea]U\xd47\x85M\xdb\x8e" +
	"\x820\x99\x1c\xeb\xf7C\xe7#o5\xcb\xb1\x0fo\x9b" +
	"\xd8\x9f\xc5\x9f\xab\xd2Q\xd4\xf6\x98\xbfg\x0b\x87R_" +
	";\x7f2\xf6\xb7\xe7\x0a\xee(\xea}a\x9ayY5" +
	"/\xc0 \x97\xd1\xec\xc6k\xdb6\xc8K\x9e\x1eD&" +
	"\xe6)\xb0\xa5\xc8\xf9\xa3\x07\x05\xbap7\xc8n\xf8\x18" +
	"0y\x9fc\xe0\x7f\x00\x00\x00\xff\xff\x04\x96\xa0a"

func init() {
	schemas.Register(schema_ad3f2ae443d613d9,
		0xa4d7434c98251eb9,
		0xb59ee0bfc7a99f7e,
		0xedec5a16c6a1a062)
}
